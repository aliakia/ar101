;  Assembly code generated by mikroVirtualMachine - V. 5.0.0.3
;  Date/Time: 01/12/2022 9:38:47 am
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$005C	$	_mask:
;ass.pbas,4 :: 		sub function mask(dim num as byte)as byte
;ass.pbas,6 :: 		case 0 result = $C0
$005C	$	ass_L_3:
$005C	$1303			BCF	STATUS, RP1
$005D	$1283			BCF	STATUS, RP0
$005E	$080D			MOVF	FARG_mask, 0
$005F	$3A00			XORLW	0
$0060	$1D03			BTFSS	STATUS, Z
$0061	$2865			GOTO	ass_L_4
$0062	$	ass_L_2:
$0062	$30C0			MOVLW	192
$0063	$008E			MOVWF	_mask_local_result
$0064	$28A4			GOTO	ass_L_1
$0065	$	ass_L_4:
;ass.pbas,7 :: 		case 1 result = $F9
$0065	$	ass_L_6:
$0065	$080D			MOVF	FARG_mask, 0
$0066	$3A01			XORLW	1
$0067	$1D03			BTFSS	STATUS, Z
$0068	$286C			GOTO	ass_L_7
$0069	$	ass_L_5:
$0069	$30F9			MOVLW	249
$006A	$008E			MOVWF	_mask_local_result
$006B	$28A4			GOTO	ass_L_1
$006C	$	ass_L_7:
;ass.pbas,8 :: 		case 2 result = $A4
$006C	$	ass_L_9:
$006C	$080D			MOVF	FARG_mask, 0
$006D	$3A02			XORLW	2
$006E	$1D03			BTFSS	STATUS, Z
$006F	$2873			GOTO	ass_L_10
$0070	$	ass_L_8:
$0070	$30A4			MOVLW	164
$0071	$008E			MOVWF	_mask_local_result
$0072	$28A4			GOTO	ass_L_1
$0073	$	ass_L_10:
;ass.pbas,9 :: 		case 3 result = $B0
$0073	$	ass_L_12:
$0073	$080D			MOVF	FARG_mask, 0
$0074	$3A03			XORLW	3
$0075	$1D03			BTFSS	STATUS, Z
$0076	$287A			GOTO	ass_L_13
$0077	$	ass_L_11:
$0077	$30B0			MOVLW	176
$0078	$008E			MOVWF	_mask_local_result
$0079	$28A4			GOTO	ass_L_1
$007A	$	ass_L_13:
;ass.pbas,10 :: 		case 4 result = $99
$007A	$	ass_L_15:
$007A	$080D			MOVF	FARG_mask, 0
$007B	$3A04			XORLW	4
$007C	$1D03			BTFSS	STATUS, Z
$007D	$2881			GOTO	ass_L_16
$007E	$	ass_L_14:
$007E	$3099			MOVLW	153
$007F	$008E			MOVWF	_mask_local_result
$0080	$28A4			GOTO	ass_L_1
$0081	$	ass_L_16:
;ass.pbas,11 :: 		case 5 result = $92
$0081	$	ass_L_18:
$0081	$080D			MOVF	FARG_mask, 0
$0082	$3A05			XORLW	5
$0083	$1D03			BTFSS	STATUS, Z
$0084	$2888			GOTO	ass_L_19
$0085	$	ass_L_17:
$0085	$3092			MOVLW	146
$0086	$008E			MOVWF	_mask_local_result
$0087	$28A4			GOTO	ass_L_1
$0088	$	ass_L_19:
;ass.pbas,12 :: 		case 6 result = $82
$0088	$	ass_L_21:
$0088	$080D			MOVF	FARG_mask, 0
$0089	$3A06			XORLW	6
$008A	$1D03			BTFSS	STATUS, Z
$008B	$288F			GOTO	ass_L_22
$008C	$	ass_L_20:
$008C	$3082			MOVLW	130
$008D	$008E			MOVWF	_mask_local_result
$008E	$28A4			GOTO	ass_L_1
$008F	$	ass_L_22:
;ass.pbas,13 :: 		case 7 result = $F8
$008F	$	ass_L_24:
$008F	$080D			MOVF	FARG_mask, 0
$0090	$3A07			XORLW	7
$0091	$1D03			BTFSS	STATUS, Z
$0092	$2896			GOTO	ass_L_25
$0093	$	ass_L_23:
$0093	$30F8			MOVLW	248
$0094	$008E			MOVWF	_mask_local_result
$0095	$28A4			GOTO	ass_L_1
$0096	$	ass_L_25:
;ass.pbas,14 :: 		case 8 result = $80
$0096	$	ass_L_27:
$0096	$080D			MOVF	FARG_mask, 0
$0097	$3A08			XORLW	8
$0098	$1D03			BTFSS	STATUS, Z
$0099	$289D			GOTO	ass_L_28
$009A	$	ass_L_26:
$009A	$3080			MOVLW	128
$009B	$008E			MOVWF	_mask_local_result
$009C	$28A4			GOTO	ass_L_1
$009D	$	ass_L_28:
;ass.pbas,15 :: 		case 9 result = $90
$009D	$	ass_L_30:
$009D	$080D			MOVF	FARG_mask, 0
$009E	$3A09			XORLW	9
$009F	$1D03			BTFSS	STATUS, Z
$00A0	$28A4			GOTO	ass_L_31
$00A1	$	ass_L_29:
$00A1	$3090			MOVLW	144
$00A2	$008E			MOVWF	_mask_local_result
$00A3	$28A4			GOTO	ass_L_1
$00A4	$	ass_L_31:
$00A4	$	ass_L_1:
;ass.pbas,16 :: 		end select
$00A4	$	ass_L_0:
$00A4	$080E			MOVF	_mask_local_result, 0
$00A5	$00C0			MOVWF	STACK_0
$00A6	$0008			RETURN
$0004	$	_main:
;ass.pbas,18 :: 		main:
$0004	$	_main_main:
;ass.pbas,19 :: 		trisa=0
$0004	$1303			BCF	STATUS, RP1
$0005	$1683			BSF	STATUS, RP0
$0006	$0185			CLRF	TRISA, 1
;ass.pbas,20 :: 		trisb=0
$0007	$0186			CLRF	TRISB, 1
;ass.pbas,21 :: 		porta=0
$0008	$1283			BCF	STATUS, RP0
$0009	$0185			CLRF	PORTA, 1
;ass.pbas,22 :: 		portb=mask(0)
$000A	$018D			CLRF	FARG_mask, 1
$000B	$205C			CALL	_mask
$000C	$0840			MOVF	STACK_0, 0
$000D	$0086			MOVWF	PORTB
;ass.pbas,23 :: 		x=0
$000E	$018C			CLRF	_x, 1
;ass.pbas,25 :: 		main2:
$000F	$	_main_main2:
;ass.pbas,26 :: 		if porta.0=1 then
$000F	$3001			MOVLW	1
$0010	$0505			ANDWF	PORTA, 0
$0011	$00C1			MOVWF	STACK_1
$0012	$0841			MOVF	STACK_1, 0
$0013	$3A01			XORLW	1
$0014	$1D03			BTFSS	STATUS, Z
$0015	$2834			GOTO	ass_L_34
$0016	$	ass_L_33:
;ass.pbas,27 :: 		x=x+1
$0016	$0A0C			INCF	_x, 0
$0017	$00C0			MOVWF	STACK_0
$0018	$0840			MOVF	STACK_0, 0
$0019	$008C			MOVWF	_x
;ass.pbas,28 :: 		portb=mask(x)
$001A	$0840			MOVF	STACK_0, 0
$001B	$008D			MOVWF	FARG_mask
$001C	$205C			CALL	_mask
$001D	$0840			MOVF	STACK_0, 0
$001E	$0086			MOVWF	PORTB
;ass.pbas,29 :: 		delay_ms(100)
$001F	$3082			MOVLW	130
$0020	$00CB			MOVWF	STACK_11
$0021	$30FF			MOVLW	255
$0022	$00CA			MOVWF	STACK_10
$0023	$0BCB			DECFSZ	STACK_11, F
$0024	$2826			GOTO	$+2
$0025	$2829			GOTO	$+4
$0026	$0BCA			DECFSZ	STACK_10, F
$0027	$2826			GOTO	$-1
$0028	$2823			GOTO	$-5
$0029	$3087			MOVLW	135
$002A	$00CA			MOVWF	STACK_10
$002B	$0BCA			DECFSZ	STACK_10, F
$002C	$282B			GOTO	$-1
$002D	$0000			NOP
;ass.pbas,30 :: 		if x>9 then
$002E	$080C			MOVF	_x, 0
$002F	$3C09			SUBLW	9
$0030	$1803			BTFSC	STATUS, C
$0031	$2834			GOTO	ass_L_37
$0032	$	ass_L_36:
;ass.pbas,31 :: 		x=9
$0032	$3009			MOVLW	9
$0033	$008C			MOVWF	_x
$0034	$	ass_L_37:
;ass.pbas,32 :: 		end if
$0034	$	ass_L_38:
$0034	$	ass_L_34:
;ass.pbas,33 :: 		end if
$0034	$	ass_L_35:
;ass.pbas,34 :: 		if porta.1=1 then
$0034	$3000			MOVLW	0
$0035	$1885			BTFSC	PORTA, 1
$0036	$3001			MOVLW	1
$0037	$00C1			MOVWF	STACK_1
$0038	$0841			MOVF	STACK_1, 0
$0039	$3A01			XORLW	1
$003A	$1D03			BTFSS	STATUS, Z
$003B	$285A			GOTO	ass_L_40
$003C	$	ass_L_39:
;ass.pbas,35 :: 		x=x-1
$003C	$030C			DECF	_x, 0
$003D	$00C0			MOVWF	STACK_0
$003E	$0840			MOVF	STACK_0, 0
$003F	$008C			MOVWF	_x
;ass.pbas,36 :: 		portb=mask(x)
$0040	$0840			MOVF	STACK_0, 0
$0041	$008D			MOVWF	FARG_mask
$0042	$205C			CALL	_mask
$0043	$0840			MOVF	STACK_0, 0
$0044	$0086			MOVWF	PORTB
;ass.pbas,37 :: 		delay_ms(100)
$0045	$3082			MOVLW	130
$0046	$00CB			MOVWF	STACK_11
$0047	$30FF			MOVLW	255
$0048	$00CA			MOVWF	STACK_10
$0049	$0BCB			DECFSZ	STACK_11, F
$004A	$284C			GOTO	$+2
$004B	$284F			GOTO	$+4
$004C	$0BCA			DECFSZ	STACK_10, F
$004D	$284C			GOTO	$-1
$004E	$2849			GOTO	$-5
$004F	$3087			MOVLW	135
$0050	$00CA			MOVWF	STACK_10
$0051	$0BCA			DECFSZ	STACK_10, F
$0052	$2851			GOTO	$-1
$0053	$0000			NOP
;ass.pbas,38 :: 		if x=1 then
$0054	$080C			MOVF	_x, 0
$0055	$3A01			XORLW	1
$0056	$1D03			BTFSS	STATUS, Z
$0057	$285A			GOTO	ass_L_43
$0058	$	ass_L_42:
;ass.pbas,39 :: 		x=1
$0058	$3001			MOVLW	1
$0059	$008C			MOVWF	_x
$005A	$	ass_L_43:
;ass.pbas,40 :: 		end if
$005A	$	ass_L_44:
$005A	$	ass_L_40:
;ass.pbas,41 :: 		end if
$005A	$	ass_L_41:
;ass.pbas,42 :: 		goto main2
$005A	$280F			GOTO	_main_main2
$005B	$285B			GOTO	$
